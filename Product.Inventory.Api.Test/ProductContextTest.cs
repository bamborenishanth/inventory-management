using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace Product.Inventory.Api.Test
{
	[TestClass]
	public class ProductContextTests
	{
		private DbContextOptions<ProductContext> _options;

		[TestInitialize]
		public void Setup()
		{
			_options = new DbContextOptionsBuilder<ProductContext>()
				.UseInMemoryDatabase(databaseName: "ProductTestDb")
				.Options;

			using (var context = new ProductContext(_options))
			{
				context.Products.Add(new Product { Name = "Test Product 1", Price = 50.0M });
				context.Products.Add(new Product { Name = "Test Product 2", Price = 150.0M });
				context.SaveChanges();
			}
		}

		[TestMethod]
		public void ProductContextCanAddAndRetrieveProducts()
		{
			// Arrange
			using (var context = new ProductContext(_options))
			{
				// Act
				var products = context.Products.ToList();

				// Assert
				Assert.AreEqual(2, products.Count);
				Assert.AreEqual("Test Product 1", products[0].Name);
				Assert.AreEqual(50.0M, products[0].Price);
				Assert.AreEqual("Test Product 2", products[1].Name);
				Assert.AreEqual(150.0M, products[1].Price);
			}
		}

		[TestMethod]
		public void ProductContextProductIdHasDefaultSequenceValue()
		{
			// Arrange
			using (var context = new ProductContext(_options))
			{
				// Act
				var product = new Product { Name = "Test Product 3", Price = 200.0M };
				context.Products.Add(product);
				context.SaveChanges();

				// Assert
				Assert.AreNotEqual(0, product.ProductId); // We cannot assert the value for 6 digit autogenerated id since in-memory db doesn't support the sequences
				Assert.AreEqual("Test Product 3", product.Name);
			}
		}

		[TestCleanup]
		public void Cleanup()
		{
			// Clean up the database after each test
			using (var context = new ProductContext(_options))
			{
				context.Database.EnsureDeleted();
			}
		}
	}
}
